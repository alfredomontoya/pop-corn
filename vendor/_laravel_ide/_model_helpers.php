<?php

namespace App\Models {

  /**
   * App\Models\ProductoPrecio
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property int $user_id
   * @property string|null $fecha_fin
   * @property string|null $fecha_inicio
   * @property bool $activo
   * @property float|null $precio_compra
   * @property float $precio_venta
   * @property int $producto_id
   * @property int $id
   * @property-read \App\Models\Producto $producto
   * @property-read \App\Models\User $user
   * @method static \Illuminate\Database\Eloquent\Builder<ProductoPrecio>|ProductoPrecio whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductoPrecio>|ProductoPrecio whereProductoId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductoPrecio>|ProductoPrecio wherePrecioVenta($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductoPrecio>|ProductoPrecio wherePrecioCompra($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductoPrecio>|ProductoPrecio whereActivo($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductoPrecio>|ProductoPrecio whereFechaInicio($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductoPrecio>|ProductoPrecio whereFechaFin($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductoPrecio>|ProductoPrecio whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductoPrecio>|ProductoPrecio whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductoPrecio>|ProductoPrecio whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductoPrecio>|ProductoPrecio newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductoPrecio>|ProductoPrecio newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductoPrecio>|ProductoPrecio query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed whereValueBetween($value, array $columns, $boolean, $not)
   * @method static mixed orWhereValueBetween($value, array $columns)
   * @method static mixed whereValueNotBetween($value, array $columns, $boolean)
   * @method static mixed orWhereValueNotBetween($value, array $columns)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed reorderDesc($column)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, array|string $uniqueBy, array $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed pipe($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class ProductoPrecio extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Pedido
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property mixed $estado
   * @property string|null $observacion
   * @property float $total
   * @property string $fecha
   * @property int $estado_pedido_id
   * @property int $user_id
   * @property int|null $cliente_id
   * @property int $id
   * @property-read \App\Models\Cliente $cliente
   * @property-read \App\Models\User $user
   * @property-read \App\Models\EstadoPedido $estadoPedido
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\DetallePedido> $detalles
   * @property-read int|null $detalles_count
   * @method static \Illuminate\Database\Eloquent\Builder<Pedido>|Pedido whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Pedido>|Pedido whereClienteId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Pedido>|Pedido whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Pedido>|Pedido whereEstadoPedidoId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Pedido>|Pedido whereFecha($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Pedido>|Pedido whereTotal($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Pedido>|Pedido whereObservacion($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Pedido>|Pedido whereEstado($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Pedido>|Pedido whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Pedido>|Pedido whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Pedido>|Pedido newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Pedido>|Pedido newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Pedido>|Pedido query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed whereValueBetween($value, array $columns, $boolean, $not)
   * @method static mixed orWhereValueBetween($value, array $columns)
   * @method static mixed whereValueNotBetween($value, array $columns, $boolean)
   * @method static mixed orWhereValueNotBetween($value, array $columns)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed reorderDesc($column)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, array|string $uniqueBy, array $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed pipe($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Pedido extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Caja
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $observacion
   * @property mixed $estado
   * @property float|null $saldo_final
   * @property float|null $total_egresos
   * @property float|null $total_ingresos
   * @property float $saldo_inicial
   * @property string|null $fecha_cierre
   * @property string $fecha_apertura
   * @property int $user_id
   * @property int $id
   * @property-read mixed $ingresos_calculados
   * @property-read mixed $egresos_calculados
   * @property-read mixed $saldo_final_calculado
   * @property-read \App\Models\User $user
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Movimiento> $movimientos
   * @property-read int|null $movimientos_count
   * @method static \Illuminate\Database\Eloquent\Builder<Caja>|Caja whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Caja>|Caja whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Caja>|Caja whereFechaApertura($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Caja>|Caja whereFechaCierre($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Caja>|Caja whereSaldoInicial($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Caja>|Caja whereTotalIngresos($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Caja>|Caja whereTotalEgresos($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Caja>|Caja whereSaldoFinal($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Caja>|Caja whereEstado($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Caja>|Caja whereObservacion($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Caja>|Caja whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Caja>|Caja whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Caja>|Caja newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Caja>|Caja newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Caja>|Caja query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed whereValueBetween($value, array $columns, $boolean, $not)
   * @method static mixed orWhereValueBetween($value, array $columns)
   * @method static mixed whereValueNotBetween($value, array $columns, $boolean)
   * @method static mixed orWhereValueNotBetween($value, array $columns)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed reorderDesc($column)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, array|string $uniqueBy, array $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed pipe($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Caja extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Captacion
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $descripcion
   * @property float $precio
   * @property string $lugar
   * @property int $nro
   * @property int $asesor_id
   * @property int $id
   * @property-read \App\Models\User $asesor
   * @method static \Illuminate\Database\Eloquent\Builder<Captacion>|Captacion whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Captacion>|Captacion whereAsesorId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Captacion>|Captacion whereNro($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Captacion>|Captacion whereLugar($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Captacion>|Captacion wherePrecio($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Captacion>|Captacion whereDescripcion($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Captacion>|Captacion whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Captacion>|Captacion whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Captacion>|Captacion newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Captacion>|Captacion newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Captacion>|Captacion query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed whereValueBetween($value, array $columns, $boolean, $not)
   * @method static mixed orWhereValueBetween($value, array $columns)
   * @method static mixed whereValueNotBetween($value, array $columns, $boolean)
   * @method static mixed orWhereValueNotBetween($value, array $columns)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed reorderDesc($column)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, array|string $uniqueBy, array $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed pipe($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Captacion extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Categoria
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property int $user_id
   * @property string|null $descripcion
   * @property string|null $imagen
   * @property string $nombre
   * @property int $id
   * @property-read \App\Models\User $user
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Producto> $productos
   * @property-read int|null $productos_count
   * @method static \Illuminate\Database\Eloquent\Builder<Categoria>|Categoria whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Categoria>|Categoria whereNombre($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Categoria>|Categoria whereImagen($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Categoria>|Categoria whereDescripcion($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Categoria>|Categoria whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Categoria>|Categoria whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Categoria>|Categoria whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Categoria>|Categoria newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Categoria>|Categoria newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Categoria>|Categoria query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed whereValueBetween($value, array $columns, $boolean, $not)
   * @method static mixed orWhereValueBetween($value, array $columns)
   * @method static mixed whereValueNotBetween($value, array $columns, $boolean)
   * @method static mixed orWhereValueNotBetween($value, array $columns)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed reorderDesc($column)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, array|string $uniqueBy, array $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed pipe($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Categoria extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Cliente
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $notas
   * @property mixed $estado
   * @property string|null $email
   * @property string|null $telefono
   * @property string|null $ubicacion
   * @property string|null $direccion
   * @property string|null $propietario
   * @property string $nombre_razon_social
   * @property string|null $numero_documento
   * @property mixed $tipo
   * @property mixed $tipo_documento
   * @property int $user_id
   * @property int $id
   * @property-read \App\Models\User $user
   * @method static \Illuminate\Database\Eloquent\Builder<Cliente>|Cliente whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Cliente>|Cliente whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Cliente>|Cliente whereTipoDocumento($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Cliente>|Cliente whereTipo($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Cliente>|Cliente whereNumeroDocumento($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Cliente>|Cliente whereNombreRazonSocial($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Cliente>|Cliente wherePropietario($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Cliente>|Cliente whereDireccion($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Cliente>|Cliente whereUbicacion($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Cliente>|Cliente whereTelefono($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Cliente>|Cliente whereEmail($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Cliente>|Cliente whereEstado($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Cliente>|Cliente whereNotas($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Cliente>|Cliente whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Cliente>|Cliente whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Cliente>|Cliente newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Cliente>|Cliente newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Cliente>|Cliente query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed whereValueBetween($value, array $columns, $boolean, $not)
   * @method static mixed orWhereValueBetween($value, array $columns)
   * @method static mixed whereValueNotBetween($value, array $columns, $boolean)
   * @method static mixed orWhereValueNotBetween($value, array $columns)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed reorderDesc($column)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, array|string $uniqueBy, array $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed pipe($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Cliente extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\DetallePedido
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property float $subtotal
   * @property float $precio
   * @property int $cantidad
   * @property int $producto_id
   * @property int $pedido_id
   * @property int $id
   * @property-read \App\Models\Pedido $pedido
   * @property-read \App\Models\Producto $producto
   * @method static \Illuminate\Database\Eloquent\Builder<DetallePedido>|DetallePedido whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DetallePedido>|DetallePedido wherePedidoId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DetallePedido>|DetallePedido whereProductoId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DetallePedido>|DetallePedido whereCantidad($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DetallePedido>|DetallePedido wherePrecio($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DetallePedido>|DetallePedido whereSubtotal($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DetallePedido>|DetallePedido whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DetallePedido>|DetallePedido whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DetallePedido>|DetallePedido newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<DetallePedido>|DetallePedido newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<DetallePedido>|DetallePedido query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed whereValueBetween($value, array $columns, $boolean, $not)
   * @method static mixed orWhereValueBetween($value, array $columns)
   * @method static mixed whereValueNotBetween($value, array $columns, $boolean)
   * @method static mixed orWhereValueNotBetween($value, array $columns)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed reorderDesc($column)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, array|string $uniqueBy, array $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed pipe($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class DetallePedido extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\DetalleVenta
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property float $subtotal
   * @property float $precio_unitario
   * @property int $cantidad
   * @property int $producto_precio_id
   * @property int $producto_id
   * @property int $venta_id
   * @property int $id
   * @property-read \App\Models\Venta $venta
   * @property-read \App\Models\Producto $producto
   * @property-read \App\Models\ProductoPrecio $productoPrecio
   * @method static \Illuminate\Database\Eloquent\Builder<DetalleVenta>|DetalleVenta whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DetalleVenta>|DetalleVenta whereVentaId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DetalleVenta>|DetalleVenta whereProductoId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DetalleVenta>|DetalleVenta whereProductoPrecioId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DetalleVenta>|DetalleVenta whereCantidad($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DetalleVenta>|DetalleVenta wherePrecioUnitario($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DetalleVenta>|DetalleVenta whereSubtotal($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DetalleVenta>|DetalleVenta whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DetalleVenta>|DetalleVenta whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DetalleVenta>|DetalleVenta newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<DetalleVenta>|DetalleVenta newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<DetalleVenta>|DetalleVenta query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed whereValueBetween($value, array $columns, $boolean, $not)
   * @method static mixed orWhereValueBetween($value, array $columns)
   * @method static mixed whereValueNotBetween($value, array $columns, $boolean)
   * @method static mixed orWhereValueNotBetween($value, array $columns)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed reorderDesc($column)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, array|string $uniqueBy, array $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed pipe($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class DetalleVenta extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\EstadoPedido
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string $estado
   * @property int $id
   * @method static \Illuminate\Database\Eloquent\Builder<EstadoPedido>|EstadoPedido whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<EstadoPedido>|EstadoPedido whereEstado($value)
   * @method static \Illuminate\Database\Eloquent\Builder<EstadoPedido>|EstadoPedido whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<EstadoPedido>|EstadoPedido whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<EstadoPedido>|EstadoPedido newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<EstadoPedido>|EstadoPedido newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<EstadoPedido>|EstadoPedido query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed whereValueBetween($value, array $columns, $boolean, $not)
   * @method static mixed orWhereValueBetween($value, array $columns)
   * @method static mixed whereValueNotBetween($value, array $columns, $boolean)
   * @method static mixed orWhereValueNotBetween($value, array $columns)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed reorderDesc($column)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, array|string $uniqueBy, array $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed pipe($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class EstadoPedido extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Movimiento
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string $fecha
   * @property mixed $tipo
   * @property float $monto
   * @property string|null $descripcion
   * @property int $nro
   * @property int|null $referencia_id
   * @property string|null $referencia_type
   * @property int $caja_id
   * @property int $user_id
   * @property int $id
   * @property-read \App\Models\Caja $caja
   * @property-read \App\Models\User $user
   * @method static \Illuminate\Database\Eloquent\Builder<Movimiento>|Movimiento whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Movimiento>|Movimiento whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Movimiento>|Movimiento whereCajaId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Movimiento>|Movimiento whereReferenciaType($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Movimiento>|Movimiento whereReferenciaId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Movimiento>|Movimiento whereNro($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Movimiento>|Movimiento whereDescripcion($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Movimiento>|Movimiento whereMonto($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Movimiento>|Movimiento whereTipo($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Movimiento>|Movimiento whereFecha($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Movimiento>|Movimiento whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Movimiento>|Movimiento whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Movimiento>|Movimiento newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Movimiento>|Movimiento newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Movimiento>|Movimiento query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed whereValueBetween($value, array $columns, $boolean, $not)
   * @method static mixed orWhereValueBetween($value, array $columns)
   * @method static mixed whereValueNotBetween($value, array $columns, $boolean)
   * @method static mixed orWhereValueNotBetween($value, array $columns)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed reorderDesc($column)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, array|string $uniqueBy, array $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed pipe($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Movimiento extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Producto
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property int|null $updated_by
   * @property int $user_id
   * @property bool $activo
   * @property string|null $unidad_medida
   * @property int $stock_minimo
   * @property int $stock_actual
   * @property string|null $codigo
   * @property int $categoria_id
   * @property string|null $descripcion
   * @property string $nombre
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ProductoImagen> $imagenes
   * @property-read int|null $imagenes_count
   * @property-read \App\Models\ProductoImagen $imagenPrincipal
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ProductoPrecio> $precios
   * @property-read int|null $precios_count
   * @property-read \App\Models\ProductoPrecio $precioActivo
   * @property-read \App\Models\User $user
   * @property-read \App\Models\User $updatedBy
   * @property-read \App\Models\Categoria $categoria
   * @method static \Illuminate\Database\Eloquent\Builder<Producto>|Producto whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Producto>|Producto whereNombre($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Producto>|Producto whereDescripcion($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Producto>|Producto whereCategoriaId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Producto>|Producto whereCodigo($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Producto>|Producto whereStockActual($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Producto>|Producto whereStockMinimo($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Producto>|Producto whereUnidadMedida($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Producto>|Producto whereActivo($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Producto>|Producto whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Producto>|Producto whereUpdatedBy($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Producto>|Producto whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Producto>|Producto whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Producto>|Producto newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Producto>|Producto newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Producto>|Producto query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed whereValueBetween($value, array $columns, $boolean, $not)
   * @method static mixed orWhereValueBetween($value, array $columns)
   * @method static mixed whereValueNotBetween($value, array $columns, $boolean)
   * @method static mixed orWhereValueNotBetween($value, array $columns)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed reorderDesc($column)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, array|string $uniqueBy, array $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed pipe($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Producto extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\ProductoImagen
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property int $user_id
   * @property bool $es_principal
   * @property string|null $imagen
   * @property int $producto_id
   * @property int $id
   * @property-read \App\Models\Producto $producto
   * @property-read \App\Models\User $user
   * @method static \Illuminate\Database\Eloquent\Builder<ProductoImagen>|ProductoImagen whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductoImagen>|ProductoImagen whereProductoId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductoImagen>|ProductoImagen whereImagen($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductoImagen>|ProductoImagen whereEsPrincipal($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductoImagen>|ProductoImagen whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductoImagen>|ProductoImagen whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductoImagen>|ProductoImagen whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductoImagen>|ProductoImagen newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductoImagen>|ProductoImagen newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductoImagen>|ProductoImagen query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed whereValueBetween($value, array $columns, $boolean, $not)
   * @method static mixed orWhereValueBetween($value, array $columns)
   * @method static mixed whereValueNotBetween($value, array $columns, $boolean)
   * @method static mixed orWhereValueNotBetween($value, array $columns)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed reorderDesc($column)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, array|string $uniqueBy, array $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed pipe($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class ProductoImagen extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\TipoPago
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property bool $activo
   * @property string $nombre
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Venta> $ventas
   * @property-read int|null $ventas_count
   * @method static \Illuminate\Database\Eloquent\Builder<TipoPago>|TipoPago whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TipoPago>|TipoPago whereNombre($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TipoPago>|TipoPago whereActivo($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TipoPago>|TipoPago whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TipoPago>|TipoPago whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TipoPago>|TipoPago newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<TipoPago>|TipoPago newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<TipoPago>|TipoPago query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed whereValueBetween($value, array $columns, $boolean, $not)
   * @method static mixed orWhereValueBetween($value, array $columns)
   * @method static mixed whereValueNotBetween($value, array $columns, $boolean)
   * @method static mixed orWhereValueNotBetween($value, array $columns)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed reorderDesc($column)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, array|string $uniqueBy, array $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed pipe($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class TipoPago extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\User
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $remember_token
   * @property mixed $role
   * @property string $password
   * @property \Illuminate\Support\Carbon|null $email_verified_at
   * @property string $email
   * @property string $name
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \Illuminate\Notifications\DatabaseNotification> $notifications
   * @property-read int|null $notifications_count
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmail($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmailVerifiedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePassword($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRole($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRememberToken($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed whereValueBetween($value, array $columns, $boolean, $not)
   * @method static mixed orWhereValueBetween($value, array $columns)
   * @method static mixed whereValueNotBetween($value, array $columns, $boolean)
   * @method static mixed orWhereValueNotBetween($value, array $columns)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed reorderDesc($column)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, array|string $uniqueBy, array $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed pipe($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class User extends \Illuminate\Foundation\Auth\User
  {
    //
  }

}